Python Flask web server which will:
  1. enumerate any petbuddy-device (PBD) which connects to the server and manage a connection to it.
  2. enumerate any petbuddy-companion app (PBC) which connects to the server and manage a connection to it.
  3. serve as a middleman between the PBD and the PBC.
  4. use a sql server which will track all PBDs out in the field. It will offer a signup process during the onboarding that will be accessed through the PBC app and perhaps also a web interface


1. Clone the petbuddy_cloud repo and Install python2

2. Install virtualenv:
             $ sudo apt-get install virtualenv
             $ virtualenv --version
             $ virtualenv petbuddy_cloud          #this will create a virtual python environment inside the petbuddy_cloud folder
             $ cd petbuddy_cloud
             $ . bin/activate                     #this will get virtualenv to treat this like a local environment, after this
                                                  #the shell prompt will have (petbuddy_cloud) before the $ sign:
             (petbuddy_cloud) $                   #Now everything that is installed for python using pip will be installed locally in this folder

             You can see the local virtual environment that is created by using the tree command inside the petbuddy_cloud folder:
             (petbuddy_cloud) cabana@cabana-desktop:~/petbuddy_cloud$ tree -L 1
              .
              ├── bin
              ├── include
              ├── lib
              ├── local
              ├── petbuddy_cloud
              ├── petbuddy.wsgi
              ├── pip-selfcheck.json
              ├── README
              ├── runserver.py
              └── share

3. Install python stuff:
             - pip install Flask
             - pip install flask-wtf
             - pip install flask-mail
             - pip install flask-sqlalchemy

4. Install apache2 and mod wsgi:
             $ sudo apt-get install apache2
                ** visit the ip address of the server machine from an external machine's browser
                   you should see the apache2 Ubuntu default page

             $ sudo apt-get install libapache2-mod-wsgi python-dev
                ** WSGI (Web Server Gateway Interface) is an interface between web servers and web
                   apps for python. Mod_wsgi is an Apache HTTP server mod that enables Apache to 
                   serve Flask applications.

             $ cd /var/www
             $ ls
                ** there should be a html folder in here
             $ sudo ln -s /path/to/petbuddy_cloud ./petbuddy_cloud
                ** this will create a symlink to the petbuddy_cloud repo so that apache sees it

             $ sudo cp petbuddy_cloud/apache/petbuddy_cloud.conf /etc/apache2/sites-available
                ** This will configure a new virtual host for petbuddy_cloud app with apache

             $ sudo a2ensite petbuddy_cloud
             Enabling site petbuddy_cloud.
             To activate the new configuration, you need to run:
               service apache2 reload
                ** This will enable the virtual host

             - Location of apache logs:
               /var/log/apache2/error.log
             - To restart the apache server:
             $ sudo apachectl restart
             

5. 

4. mysql setup:

              *************************************************************************************
              * 1. First install mysql
              *    - check if you have it:
              *      $ mysql --version
              *    - if not then:
              *      $ sudo apt-get install mysql-server mysql-client
              *    - mysql-server will ask for root install password during install, set
              *      this and save it in something like keepass
              *
              * 2. Sign into mysql
              *    - $ mysql -u root -p
              *
              *
              * 3. Create a user for the petbuddy application that will run on the server. This
              *    user will be the petbuddy app itself. Whenever the app needs to access user
              *    info, it will access the database as this user:
              *    - CREATE USER 'petbuddycloud'@'localhost' IDENTIFIED BY 'soMeP@55W0RD';
              *        ** We set it for localhost so that only the local app can have access
              *    - GRANT ALL ON petbuddycloud.* TO 'petbuddycloud'@'localhost';
              *        ** give all db permissions to user=petbuddycloud for database=petbuddycloud
              *
              * 4. Create a database where we will store our data tables
              *   - CREATE DATABASE development;
              *
              * 5. Create a table under the development database:
              *   - CREATE TABLE pbdusrs (
              *       device_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
              *       serial_no VARCHAR(100) NOT NULL,
              *       last_ping INT NOT NULL,
              *       ip_add VARCHAR(100) NOT NULL,
              *       email VARCHAR(120) NOT NULL UNIQUE,
              *       pwdhash VARCHAR(100) NOT NULL
              *     );
              *
              *************************************************************************************



              Additional info:
              ****************
              To access db:
                 ubuntu:$ mysql -u root -p
              This will give you a sql prompt like:
                 mysql>
              We are using the development db. To see names of all the dbs:
                 mysql> show databases;

              Table structure in db that stores info about PBDs:
              | serial_no | last_ping	| ip_add | email_add | password |

              mysql> describe pbdusrs;
              +-----------+--------------+------+-----+---------+----------------+
              | Field     | Type         | Null | Key | Default | Extra          |
              +-----------+--------------+------+-----+---------+----------------+
              | device_id | int(11)      | NO   | PRI | NULL    | auto_increment |
              | serial_no | varchar(100) | NO   |     | NULL    |                |
              | last_ping | int(11)      | NO   |     | NULL    |                |
              | ip_add    | varchar(100) | NO   |     | NULL    |                |
              | email     | varchar(120) | NO   | UNI | NULL    |                |
              | pwdhash   | varchar(100) | NO   |     | NULL    |                |
              +-----------+--------------+------+-----+---------+----------------+

***********************************************************************************

Removed stuff from Amazon AWS and switched to home raspi server. Amazon was charging.

Stuff handy for setup on Amazon AWS:
To get the flask app working through apache on the AWS instance, you have to create a virtual environment
using the virtualenv tool. This is because on AWS the environment is local, so all installed tools/utilities
go under a weird ~/.local/ directory. Coupled with apache running as root user, this may have been causing
problems. So what I had to do was create a virtualenv in my petbuddy-cloud directory, install flask in it
and then add the following to the wsgi file:

activate_this = '/path/to/virtualenv/bin/activate_this.py'
execfile(activate_this, dict(__file__=activate_this)

import sys
sys.path.insert(0, '/path/to/flask/appname')

***********************************************************************************
